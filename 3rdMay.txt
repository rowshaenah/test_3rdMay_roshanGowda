1.The difference b/w overriding and overloading
-->When two or more methods in the same class have the same name but different parameters,
it's called Overloading. When the method signature are the same in the superclass and the child class,
it's called Overriding.

2.if both the functions are static can we override?
-->No, we cannot override static methods because method overriding is based on dynamic binding at 
runtime and the static methods are bonded using static binding at compile time.

3.The difference between final finally and finalize?
-->final-final is the keyword and access modifier which is used to apply restrictions on
a class, method or variable.
finally-finally is the block in Java Exception Handling to execute the important code 
whether the exception occurs or not.
finalize-finalize is the method in Java which is used to perform clean up processing just 
before object is garbage collected.

4.what are maker interfaces?
-->The marker interface pattern is a design pattern in computer science, used with languages
that provide run-time type information about objects. It provides a
means to associate metadata with a class where the language does not have explicit support for such metadata.

5.what is singleton class?
-->Singleton Pattern says that just"define a class that has only one
instance and provides a global point of access to it".

6.what is the underlying data structure for arraylist and linkedlist?
-->Both ArrayList and LinkedList are two different implementations of the List interface. ArrayList is a 
resizable-array implementation, whereas LinkedList is a Doubly-linked list implementation of the List interface.

7.what is hash collision?
-->A collision, or more specifically, a hash code collision in a HashMap, is a situation where two or more key 
objects produce the same final hash value and hence point to the same bucket location or array index.

8.what are lambda expressions?
-->A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions 
are similar to methods, but they do not need a name and they can be implemented right in the body of a method.

9.what is functional Interface?
-->A functional interface is an interface that contains only one abstract method. They can have only one functionality to exhibit. From Java 8 onwards, lambda expressions can be used 
to represent the instance of a functional interface. A functional interface can have any number of default methods.

10.what are optional clases in java 8?
-->Optional is a container object used to contain not-null objects. Optional object is used to represent null with absent value. This class has various utility methods to facilitate 
code to handle values as 'available' or 'not available' instead of checking null values.

11. What is factory design pattern and Adapter and difference between them?
Factory pattern: - It is one of the most used design patterns in Java. This type of design pattern comes under 
creational pattern as this pattern provides one of the best ways to create an object. In Factory pattern, we create object without exposing the creation logic to the client and refer to newly created object using a common interface.

Adapter pattern: - It works as a bridge between two incompatible interfaces.
 This pattern involves a single class which is responsible to join functionalities of independent or incompatible interfaces.

The main difference between factory pattern and abstract factory pattern is that the factory pattern provides a method of creating objects without specifying the exact class used to create it while the abstract factory pattern provides a method to combine a group of individual factories without specifying their concrete classes.

12. What are Solid principles
-->These principles establish practices that lend to developing software with considerations for maintaining and extending as the project grows.
SOLID stands for:
S - Single-responsibility Principle
O - Open-closed Principle
L - Liskov Substitution Principle
I - Interface Segregation Principle
D - Dependency Inversion Principle

13. What does @component and @scan do in Sprinboot annotation?
-->@Component is an annotation that allows Spring to automatically detect our custom beans. Spring will: 
Scan our application for classes annotated with @Component. Instantiate them and inject any specified dependencies into them.
Spring provides a mechanism to identify Spring bean candidates explicitly through the @ComponentScan annotation. 
If the application is a Spring Boot application, then all the packages under the package containing the Spring Boot application class will be covered by an implicit component scan.

14. What is the Difference between JPA, Hibernate and ORM?
-->ORM is the approach of taking object-oriented data and mapping to a relational data store (e.g., tables in a RDBMS)
JPA is the Java EE standard specification for ORM in Java EE.
Hibernate is another implementation of the JPA specification, in that you can use the standard JPA APIs and configure your 
application to use Hibernate as the provider of the spec under the covers.
Hibernate also provides a superset of the ORM features beyond what is specified in the JPA spec. 
Meaning, that while it provides an implementation of the JPA API, it also provides more features beyond what JPA specifies.

15) What is indexing in Database?
-->Indexing is a way to optimize the performance of a database by minimizing the number of disk accesses 
required when a query is processed. It is a data structure technique which is used to quickly locate and access the data in a database.

16.What are 4 types of Drivers in Jdbc ?
-> There are 4 types of JDBC drivers:
a) JDBC-ODBC bridge driver
b) Native-API driver (partially java driver)
c) Network Protocol driver (fully java driver)
d) Thin driver (fully java driver)

17.What is difrence bew @component and @bean and @service ?
-> @Bean
@Bean works in conjunction with a configuration class (with @Configuration) and thus in the annotation based configuration.
It also is used on the methods inside of such a configuration class. Telling Spring to add whatever the method returns to the Spring Context. 
It’s done explicitly.By default, it will use the name of the method as the bean id/name. An alternative, you can specify it in the @Bean annotation.

->@Component
@Component is used on our classes, so Spring knows that it should add it. However, it only works, if we enabled a component scan for our application and our class is included.
With a component scan, Spring will scan the entire classpath and will add all @Component annotated classes to the Spring Context (with adjustable Filtering).

->@Service
We mark beans with @Service to indicate that they're holding the business logic. 
Besides being used in the service layer, there isn't any other special use for this annotation.


18) What is difference bew SOAP and restful services techinically ?
->SOAP vs. REST

Many legacy systems may still adhere to SOAP, while REST came later and is often viewed as a faster alternative in web-based scenarios. 
REST is a set of guidelines that offers flexible implementation, whereas SOAP is a protocol with specific requirements like XML messaging.
REST APIs are lightweight, making them ideal for newer contexts like the Internet of Things (IoT), mobile application development, and serverless computing. 
SOAP web services offer built-in security and transaction compliance that align with many enterprise needs, but that also makes them heavier. Additionally, many public APIs, like the Google Maps API, follow the REST guidelines

19) Difference in POST and PUT?
->PUT																		POST
This method is idempotent.															This method is not idempotent.
PUT method is call when you have to modify a single resource, which is already a part of resource collection.		POST method is call when you have to add a child resource under resources collection.
RFC-2616 depicts that the PUT method sends a request for an enclosed entity stored in the supplied request URI.		This method requests the server to accept the entity which is enclosed in the request.
PUT method syntax is PUT /questions/{question-id}										POST method syntax is POST /questions
PUT method answer can be cached.												You cannot cache PUT method responses.
PUT /vi/juice/orders/1234 indicates that you are updating a resource which is identified by “1234”.			POST /vi/juice/orders indicates that you are creating a new resource and return an identifier to describe the resource.
If you send the same request multiple times, the result will remain the same.						If you send the same POST request more than one time, you will receive different results.
PUT works as specific.														POST work as abstract.
We use UPDATE query in PUT.													We use create query in POST.
In PUT method, the client decides which URI resource should have.								In POST method, the server decides which URI resource should have.


20).IS react uni directional or Bi directional ?
->React doesn't support bi-directional. therefore React,uses unidirectional data flow.